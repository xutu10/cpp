/************************************************************************/
/* Abschnitt 3.2.1 Autor                                                */
/************************************************************************/ 

Kommentar zur Angabe des Autors:

// Autor: Klaus Mustermann   Matr.-Nr. 123 456


/************************************************************************/
/* Abschnitt 3.2.2.1 Macro Guards                                       */
/************************************************************************/ 

Macro Guard für die Header-Datei mathe/vektor.h:

#ifndef _MATHE_VEKTOR_H_
#define _MATHE_VEKTOR_H_

// Dateiinhalt

#endif /*!_MATHE_VEKTOR_H_*/

bzw. im Praktikum:

#ifndef _VEKTOR_H_
#define _VEKTOR_H_

// Dateiinhalt

#endif /*!_VEKTOR_H_*/


/************************************************************************/
/* Abschnitt 3.2.3 Inhalt von Implementierungsdateien                   */
/************************************************************************/ 

Beispielkommentar zur Trennung von Funktionsdefinitionen:

//------------------------------------------------------------------


/************************************************************************/
/* Abschnitt 3.3 Präprozessor                                           */
/************************************************************************/ 

Präprozessor-Direktive "include":

#include <prog2/include/Dateiname.h>

wobei "prog2/include" der relative Pfad ist (relativ zum aktuellen
Verzeichnis, in dem die Quelldatei liegt).


/************************************************************************/
/* Abschnitt 4.1 Allgemeine Regeln fuer Bezeichner                      */
/************************************************************************/ 

Beispiele fuer gebraeuchliche Abkuerzungen:

int max;	///< maximum
int len;	///< length
int num;	///< number


/************************************************************************/
/* Abschnitt 5 Whitespace                                               */
/************************************************************************/ 

Beispiel fuer Verwendung von Leerzeichen:

/*
 * Keine Leerzeichen zwischen dem Funktionsnamen strcmp und 
 * der Parameterliste, dafuer Leerzeichen zwischen dem 
 * Schluesselwort if und der runden Klammer um die Bedingung.
 */
if (0 == strcmp(userInputString, "done"))
{
    return 0;
}


Beispiel fuer Verwendung von Leerzeichen zur Ausrichtung:

start = ((a < b) ? a : b);
end   = ((a > b) ? a : b);


/************************************************************************/
/* Abschnitt 5.2 Lange Zeilen                                           */
/************************************************************************/ 

Beispiel fuer Umbrechen zu langer Zeile:

// Initialisierung
//
int ergebnis = (
    einLangerFunktionsName(
          langerParameterName1,
          langerParameterName2
    )
    + (wert * 10)
);


/************************************************************************/
/* Abschnitt 5.3.1 Blockkommentare                                      */
/************************************************************************/ 

Beispiel fuer einen Blockkommentar:

/*
 * Blockkommentarzeile.
 */
if (0 < inputValue) {
    // inputValue ist gueltig
    //
    useValue(inputValue);
}


/************************************************************************/
/* Abschnitt 5.3.2 Abschliessende Kommentare                             */
/************************************************************************/

Beispiele fuer einen abschliessenden Kommentar:

typedef int myIDType;	///< Typdeklaration

struct Record
{
    int   value1;	///< Integer-Wert
    float value2;	///< Float-Wert
};
 

/************************************************************************/
/* Abschnitt 6.1 Konstanten                                             */
/************************************************************************/ 

Beispiel fuer die Verwendung des sizeof-Operators fuer die
Groessenermittlung eines Arrays:

double faktoren[] =
{
    0.12345,
    123.45,
    12.345
};

const int anzahlFaktoren =
    sizeof(faktoren) / sizeof(faktoren[0]);


/************************************************************************/
/* Abschnitt 6.2 Enumerationen                                          */
/************************************************************************/ 

Beispiel fuer das Layout einer Enumeration bei Verwendung
expliziter Initialisierungen:

enum PixelFarbkomponenten
{
    rot   = 0,
    gruen = 1,
    blau  = 2
};


/************************************************************************/
/* Abschnitt 6.3 Strukturen und Unions                                  */
/************************************************************************/ 

Beispiel fuer das Layout einer Struktur:

struct RGBAWert
{
    short int rot;	///< Rotkomponente
    short int gruen;	///< Gruenkomponente
    short int blau;	///< Blaukomponente
    short int alpha;	///< Alphakanal
};

/************************************************************************/
/* Abschnitt 6.4 Klassen                                                */
/************************************************************************/ 

Beispiel fuer Zugriff auf Member-Variablen:

class BeispielKlasse
{
  public:
    int getX();
    void setX(int neuerXWert);

  private:
    int xWert;	///< Variable ist private, Zugriff ueber get/set-Funktion
};


/************************************************************************/
/* Abschnitt 7 Variablen                                                */
/************************************************************************/

Beispiel fuer unzulaessige Variablendeklaration wegen vorheriger 
Deklaration auf hoeherer Ebene:

static int counter = 0;

void function()
{
    // Unzulaessig!
    //
    int counter;

    ...
}

Stattdessen sollte man (z.B.) schreiben:

static int counter = 0;

void function()
{
    int localCounter;

    ...
}


/************************************************************************/
/* Abschnitt 8.1 Funktionsdeklarationen                                 */
/************************************************************************/

Beispiel fuer eine Funktionsdeklaration:

float berechneHypothenuse(
    float kathete1,	///< Laenge der ersten Kathete
    float kathete2	///< Laenge der zweiten Kathete
);


/************************************************************************/
/* Abschnitt 8.2 Funktionsdefinitionen                                  */
/************************************************************************/

Beispiel fuer eine Funktionsdefinition (inklusive doxygen-Kommentar):

/**
 * Die Funktion berechneHypothenuse() dient zur Berechnung der Laenge
 * der Hypothenuse in einem rechtwinkligen Dreieck anhand der Laengen
 * der beiden Katheten.
 *
 * @param kathete1 Laenge der ersten Kathete
 * @param kathete2 Laenge der zweiten Kathete
 * @return Rueckgabewert ist die Laenge der Hypothenuse
 * @pre Es wird vorausgesetzt, dass die beiden Katheten positive
 * Laenge haben.
 */
float berechneHypothenuse(
    float kathete1,	///< Laenge der ersten Kathete
    float kathete2	///< Laenge der zweiten Kathete
)
{
    float temp;	///< temporaere Variable fuer Summe der Kathetenquadrate

    temp = (kathete1 * kathete1) + (kathete2 * kathete2);

    return (sqrt(temp));
}


/************************************************************************/
/* Abschnitt 9.4 switch-Anweisungen                                     */
/************************************************************************/

Kommentierung des Durchlaufverhaltens einer case-Klausel:

// FALL-THROUGH	bzw.	// DURCHLAUF


Beispiel fuer eine switch-Anweisung mit Durchlaufverhalten:

switch (pixelFarbe)
{
  case Farbe::blau:
    ...;
    break;

  // Mehrfach-Label
  case Farbe::gruen:
  case Farbe::pink:
  case Farbe::gelb:
    ...;
    break;

  case Farbe::rot:
    rotGefunden = true;
    // FALL-THROUGH
  case Farbe::purpur:
    ...;
    break;

  default:
    // ungueltiger Wert
    //
    assert(false);
}


/************************************************************************/
/* Abschnitt 10.1 Klammernsetzung                                       */
/************************************************************************/

Klammernsetzungs-Stile:

// Oeffnende Klammer in einer Zeile mit Kontrollanweisung
//
for (int i = 0; i <= 10; i++) {
    cout << fakultaet(i) << endl;
}

// Oeffnende Klammer in separater Zeile
//
for (int i = 0; i <= 10; i++) 
{
    cout << fakultaet(i) << endl;
}
